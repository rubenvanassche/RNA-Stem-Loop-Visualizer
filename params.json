{"name":"Rna-stem-loop-visualizer","tagline":"An analyser for RNA sequences","body":"RNA Stem Loop Visualizer\r\n========================\r\n\r\nSoftware for finding and visualizing RNA Stem Loops from a RNA sequence.\r\n\r\n## Introduction\r\nRNA (**R**ibo **N**ucleine **Acid**) is actually a chain of nucleotides,\r\nabbreviated as G, A, U and C and where G is a complement of C and U of A.\r\nThe RNA will form a stem loop if there are two parts in the RNA\r\nsequence consisting of complements of each other (the stem) while there are\r\nother non-complementing nucleotides in between (the loop).\r\n\r\nAssume a RNA sequence like `CCUGCXXXXXGCAGG`, then this software will parse\r\nthis sequence and test whether this is a stem loop. If so, then it will\r\nvisualize something like below:\r\n```\r\n C === G\r\n C === G\r\n U === A\r\n G === C\r\n C === G\r\nX       X\r\n X     X\r\n    X\r\n```\r\nWhere the upper part is a stem and the lower one is a loop.\r\n\r\nEither a CFG, an LL Parser or a Turing Machine (up to the user)\r\nis used to analyze the string.\r\n\r\nNote that not all algorithms will give the same result. They all look for\r\nsomething slightly different.\r\n\r\nCFG: A stem loop across the entire input string\r\n\r\nLL Parser: A stem loop that does not necessarily use the entire input string.\r\nIf there are multiple stem loops, the one with the longest stem is chosen.\r\nIf there are multiple stem loops with the maximum size, the leftmost one is chosen.\r\n\r\nTuring Machine: Looks for the same stem loops as the LL Parser, \r\nhowever only stem loops with loops of at least 2 nucleotides will be considered.\r\n\r\nA GUI is provided in the RNAStemLoop executable. Enter an input string, \r\nchoose an algorithm, press \"Analyze\" to analyze a string and press \"Visual RSL\"\r\nto generate a visualization of the stem loop. Remember to re-analyze after\r\nchanging any input!\r\n\r\n## Installing\r\n```sh\r\n# assuming you are now in the project root directory\r\n$ mkdir build\r\n$ cd build\r\n$ cmake ..\r\n$ make \r\n$ make install\r\n```\r\n\r\nNote that Qt4 and SFML2.0 are required!\r\n\r\nNow you'll get the following executables in the `bin/` directory:\r\n\r\n### Executables\r\n\r\n- `RNAStemLoop` [The GUI for the RNA Stem Loop Visualizer]\r\n- `RNA-Stem-Loop-Visualizer` [The visualizer, shouldn't be called by the user]\r\n- `Tests` Runs all the tests using the [Catch](https://github.com/philsquared/Catch) \r\n  testing environment.\r\n\r\n\r\n## Usage\r\nOpen RNAStemLoopVisualizer and start visualizing!\r\n\r\n## Documentation\r\nThe API Documentation can be made by changing the BUILD_DOCS bool in the CMakeLists.txt file.\r\nWe also provide an online version of the documentation which can be found here: http://rubenvanassche.github.io/RNA-Stem-Loop-Visualizer/docs/html/\r\nA PDF version can also be found in the /docs/ folder\r\n\r\n## Made By\r\n```\r\nPieter Lauwers\r\nJakob Struye\r\nRuben Van Assche\r\nStijn Wouters\r\n```\r\n\r\n## Contributing\r\nYou are welcome! Just send a pull request.\r\n\r\nBugs, questions and/or ideas are welcome too, just put them on the [issues page](https://github.com/rubenvanassche/RNA-Stem-Loop-Visualizer/issues).\r\n(Also: it's really cool if you've fixed that bug by yourself and send a PR\r\ninstead)\r\n\r\n\r\n\r\nNote that the following sections are not about the RNA Stem Loop Visualizer!\r\nThey only concern testing of some algorithms used by the Visualizer.\r\n### Workshop\r\nThere are also some executables and sample files that was provided during the \r\nworkshop sessions in University of Antwerp:\r\n\r\n(sample files are put in the `workshop` folder)\r\n\r\n#### `RunTuring` - Turing Machines (Jakob Struye)\r\n```\r\n    INPUT \r\nProvide the name of a Turing Machine in .xml-format (including the \".xml\" \r\nsuffix) as a command line argument. When prompted, enter an input string\r\n\r\n    OUTPUT\r\n\"String accepted\" or \"String not accepted\" for every input string entered \r\n(or an exception message)\r\n\r\n    EXAMPLES\r\nTwo Turing Machines in .xml format are provided as examples:\r\n\r\n    - TMInput1.xml shows the basic structure of the .xml file\r\n    - TMInput2.xml is a fully functional TM using both storage in states \r\n      and multitrack and accepts all strings wcw (w being any string \r\n      consisting of 0s and 1s of at least length 1)\r\n```\r\n\r\n#### `RunCYK` - CFG / CNF / CYK-algorithm (Stijn Wouters)\r\n```\r\n    INPUT\r\nAn CFG or CNF (at your choice) in .xml-format (including the \".xml\" suffix)\r\nand a string as a command line argument.\r\n\r\n    OUTPUT\r\nA fancy, green colored \"YES!\" when the passed string is in the language of\r\nthe CFG/CNF defined from the xml-file, otherwise you'll get an (also fancy)\r\nred colored \"NO!\". In case of an invalid CFG/CNF construction you'll get an \r\nerror message.\r\n\r\n    NOTE\r\nIf you choose a CFG as input, then keep in mind that it will be converted\r\nto an CNF first before the program will actually run the CYK algorithm.\r\n\r\n    EXAMPLE\r\nThree examples are provided, each with different structure/syntaxes:\r\n\r\n    - CYK_SampleInput0.xml is a CFG accepting all strings with even a's or\r\n      even b's.\r\n    - CYK_SampleInput1.xml is a CFG accepting strings with odd a's or b's.\r\n    - CYK_SampleInput2.xml is a CFG recognizing palindrome-like strings.\r\n```\r\n\r\n#### `RunPDA` - PDA (Ruben Van Assche)\r\n```\r\n    INPUT \r\nProvide the name of a PDA in .xml-format (including the \".xml\" \r\nsuffix) as a command line argument. When prompted, enter an input string\r\n\r\n    OUTPUT\r\n\"String accepted\" or \"String not accepted\" for every input string entered \r\n(or an exception message)\r\n\r\n    EXAMPLES\r\nOne ODA in .xml format is provided as example:\r\n\r\n    - PDAInput1.xml is a PDA accepting all the palindromes of the form : [0+1]*c[0+1]*\r\n```\r\n\r\n#### LLParser (Pieter Lauwers)\r\n```\r\n    INPUT\r\nProvide a grammar in the form of the given example file. The grammar has to be a legal LL(k) grammar. \r\n\r\n    OUTPUT\r\nThe parse table for the provided grammar.\r\n\r\n    EXAMPLES\r\nLLParserInput.txt results in LLParserOutput.txt\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}